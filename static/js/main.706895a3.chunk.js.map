{"version":3,"sources":["Components/ErrorMessage/ErrorMessage.js","Components/Popup/Popup.js","App.js","serviceWorker.js","index.js"],"names":["ErrorMessage","props","className","type","id","htmlFor","onMouseEnter","e","bgColor","onMouseLeave","onClick","updateids","hoverid","hover","name","alert","message","Popup","state","erroes","uuidv4","selectedIds","per","temp","parseInt","currentTarget","setState","console","log","includes","splice","indexOf","push","showIds","map","this","err","key","toglePopup","React","Component","App","showPopup","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.706895a3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./ErrorMessage.css\";\r\n\r\n\r\nconst ErrorMessage =(props)=> {\r\n \r\n  const showAlert = (id) => {\r\n    alert(id);\r\n  };\r\n  \r\n  \r\n    return (\r\n      <div className=\"inputWraper\">\r\n        <input className=\"checkbox\" type=\"checkbox\" id={props.id}></input>\r\n        <label htmlFor={props.id}>\r\n          <div\r\n            onMouseEnter={(e) => props.bgColor(e,true)}\r\n            onMouseLeave={(e) => props.bgColor(e,false)}\r\n            onClick={()=> props.updateids(props.id)}\r\n            id = {props.hoverid}\r\n            className={\r\n              props.hover ? \"error-message-box hover\" : \"error-message-box\"\r\n            }\r\n          >\r\n            <div className=\" box box-top\">\r\n              <div className=\"icon-holder\">\r\n                <span className=\"material-icons\">control_camera</span>\r\n              </div>\r\n              <div className=\"id-holder\">\r\n                <p className=\"error-content error-header\">{props.name}</p>\r\n                <p className=\"error-content error-id\">{props.id}</p>\r\n              </div>\r\n\r\n              {props.hover ? (\r\n                <div\r\n                  onClick={() => showAlert(props.id)}\r\n                  className=\"Open-holder showOpen\"\r\n                >\r\n                  <p>Open</p>\r\n                </div>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n            </div>\r\n            <div className=\"box box-bottom\">\r\n              <p>{props.message}</p>\r\n            </div>\r\n          </div>\r\n      </label>\r\n      </div>\r\n    );\r\n  \r\n}\r\nexport default ErrorMessage;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// class ErrorMessage extends React.Component {\r\n//   // state = { hover: false };\r\n  \r\n//   // bgColor = (key,per) => {\r\n//   //   console.log(key,\"bgColor\");\r\n//   //   this.setState({ hover: per });\r\n//   // };\r\n//   showAlert = (id) => {\r\n//     alert(id);\r\n//   };\r\n  \r\n  \r\n//   render() {\r\n//     return (\r\n      // <div className=\"inputWraper\">\r\n      //   <input className=\"checkbox\" type=\"checkbox\" id={this.props.id}></input>\r\n      //   <label htmlFor={this.props.id}>\r\n//           <div\r\n//             onMouseEnter={(e) => this.props.bgColor(e,true)}\r\n//             onMouseLeave={(e) => this.props.bgColor(e,false)}\r\n//             id = {this.props.hoverid}\r\n//             className={\r\n//               this.props.hover ? \"error-message-box hover\" : \"error-message-box\"\r\n//             }\r\n//           >\r\n//             <div className=\" box box-top\">\r\n//               <div className=\"icon-holder\">\r\n//                 <span className=\"material-icons\">control_camera</span>\r\n//               </div>\r\n//               <div className=\"id-holder\">\r\n//                 <p className=\"error-content error-header\">{this.props.name}</p>\r\n//                 <p className=\"error-content error-id\">{this.props.id}</p>\r\n//               </div>\r\n\r\n//               {this.props.hover ? (\r\n//                 <div\r\n//                   onClick={() => this.showAlert(this.props.id)}\r\n//                   className=\"Open-holder showOpen\"\r\n//                 >\r\n//                   <p>Open</p>\r\n//                 </div>\r\n//               ) : (\r\n//                 \"\"\r\n//               )}\r\n//             </div>\r\n//             <div className=\"box box-bottom\">\r\n//               <p>{this.props.message}</p>\r\n//             </div>\r\n//           </div>\r\n//       //   </label>\r\n//       // </div>\r\n//     );\r\n//   }\r\n// }\r\n// export default ErrorMessage;\r\n","import React from \"react\";\r\nimport \"./Popup.css\";\r\nimport ErrorMessage from \"../ErrorMessage/ErrorMessage\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nclass Popup extends React.Component {\r\n  state = {\r\n    erroes: [\r\n      {\r\n        name: \"Test Node\",\r\n        id: uuidv4(),\r\n        message: \"value cant be null\",\r\n        hover:false,\r\n        hoverid:\"0\"\r\n      },\r\n      {\r\n        name: \"js\",\r\n        id: uuidv4(),\r\n        message: \"value cant be null value cant be nullvalue cant be null\",\r\n        hover:false,\r\n        hoverid:\"1\"\r\n\r\n      },\r\n      {\r\n        name: \"Test Node\",\r\n        id: uuidv4(),\r\n        message: \"value cant be nullvalue cant be nullvalue cant be null\",\r\n        hover:false,\r\n        hoverid:\"2\"\r\n\r\n      },\r\n      {\r\n        name: \"Node\",\r\n        id: uuidv4(),\r\n        message: \"value cant be nullvalue cant be nullvalue cant be null\",\r\n        hover:false,\r\n        hoverid:\"3\"\r\n\r\n      },\r\n    ],\r\n  };\r\n  selectedIds = [];\r\n\r\n  bgColor = (e,per) => {\r\n   let temp = [...this.state.erroes];\r\n   temp[parseInt(e.currentTarget.id)].hover = per;\r\n    this.setState({ erroes: temp });\r\n  };\r\n\r\n  updateids = (id) =>{\r\n    console.log(id);\r\n    if(!this.selectedIds.includes(id)){\r\n      console.log(\"not in sids\");\r\n      this.selectedIds.push(id);\r\n      console.log(\"pushed\",this.selectedIds);\r\n\r\n    }else{\r\n      console.log(\"in sids\");\r\n      this.selectedIds.splice(this.selectedIds.indexOf(id),1);\r\n      console.log(\"removed\",this.selectedIds);\r\n\r\n    }\r\n  }\r\n\r\n  showIds = () =>{\r\n    this.selectedIds.map((per)=>alert(per))\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Popup-background\">\r\n        <div className=\"popup\">\r\n          <p className=\"header\">Validations</p>\r\n          <div className=\"popup-inner-box\">\r\n            {this.state.erroes.map((err) => {\r\n              return (\r\n                <ErrorMessage\r\n                  {...err}\r\n                  key={err.id}\r\n                  updateids = {this.updateids}\r\n                  bgColor={this.bgColor}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n          <button className=\"btn btnclose\" onClick={this.props.toglePopup}>\r\n            Close\r\n          </button>\r\n          <button className=\"btn btnSubmit\" onClick={this.showIds}>\r\n            submit\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Popup;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Popup from \"./Components/Popup/Popup\";\nimport uuid from \"uuid\";\nclass App extends React.Component {\n  state = {\n    showPopup: true\n  };\n  toglePopup = () => {\n\n    this.setState({ showPopup: !this.state.showPopup });\n\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <button \n          onClick={this.toglePopup}\n        >\n          show\n        </button>\n        {this.state.showPopup ? <Popup toglePopup = {this.toglePopup} /> : \"\"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}