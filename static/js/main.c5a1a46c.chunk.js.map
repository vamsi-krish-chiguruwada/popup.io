{"version":3,"sources":["Components/ErrorMessage/ErrorMessage.js","Components/Popup/Popup.js","App.js","serviceWorker.js","index.js"],"names":["ErrorMessage","state","hover","bgColor","per","setState","onMouseOver","onMouseOut","className","this","props","name","errId","onClick","alert","message","React","Component","Popup","erroes","id","map","err","key","toglePopup","App","showPopup","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"+RA2CeA,G,8NAvCbC,MAAQ,CAAEC,OAAO,G,EAEjBC,QAAU,SAACC,GAET,EAAKC,SAAS,CAAEH,MAAOE,K,uDAEf,IAAD,OACP,OACE,yBACEE,YAAa,kBAAM,EAAKH,SAAQ,IAChCI,WAAY,kBAAM,EAAKJ,SAAQ,IAC/BK,UACEC,KAAKR,MAAMC,MAAQ,0BAA4B,qBAGjD,yBAAKM,UAAU,gBACb,yBAAKA,UAAU,eACb,0BAAMA,UAAU,kBAAhB,mBAEF,yBAAKA,UAAU,aACb,uBAAGA,UAAU,8BAA8BC,KAAKC,MAAMC,MACtD,uBAAGH,UAAU,0BAA0BC,KAAKC,MAAME,QAEpD,yBACEC,QAAS,kBAAMC,MAAM,EAAKJ,MAAMK,UAChCP,UACEC,KAAKR,MAAMC,MAAQ,uBAAyB,eAG9C,qCAGJ,yBAAKM,UAAU,kBACb,2BAAIC,KAAKC,MAAMK,QAAf,W,GAlCiBC,IAAMC,YCsDlBC,E,4MApDbjB,MAAQ,CACNkB,OAAQ,CACN,CACER,KAAM,YACNS,GAAI,yBACJL,QAAS,sBAEX,CACEJ,KAAM,KACNS,GAAI,0BACJL,QAAS,2DAEX,CACEJ,KAAM,YACNS,GAAI,0BACJL,QAAS,0DAEX,CACEJ,KAAM,OACNS,GAAI,0BACJL,QAAS,4D,uDAKb,OACE,yBAAKP,UAAU,oBACb,yBAAKA,UAAU,SACb,uBAAGA,UAAU,UAAb,eACA,yBAAKA,UAAU,mBACZC,KAAKR,MAAMkB,OAAOE,KAAI,SAACC,GACtB,OACE,kBAAC,EAAD,CACEC,IAAOD,EAAIF,GACXT,KAAMW,EAAIX,KACVC,MAAOU,EAAIF,GACXL,QAASO,EAAIP,cAMrB,4BAAQP,UAAU,MAAMK,QAASJ,KAAKC,MAAMc,YAA5C,e,GA3CUR,IAAMC,WCuBXQ,E,4MAtBbxB,MAAQ,CACNyB,WAAW,G,EAEbF,WAAa,WAEX,EAAKnB,SAAS,CAAEqB,WAAY,EAAKzB,MAAMyB,a,uDAIvC,OACE,yBAAKlB,UAAU,OACb,4BACEK,QAASJ,KAAKe,YADhB,QAKCf,KAAKR,MAAMyB,UAAY,kBAAC,EAAD,CAAOF,WAAcf,KAAKe,aAAiB,Q,GAjBzDR,IAAMC,WCQJU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM7B,c","file":"static/js/main.c5a1a46c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./ErrorMessage.css\";\r\n// import { Icon1 } from \"../../icons/icon1.svg\";\r\nclass ErrorMessage extends React.Component {\r\n  state = { hover: false };\r\n  // let customClassName = \"error-message-box\";\r\n  bgColor = (per) => {\r\n    // customClassName += \" hover\";\r\n    this.setState({ hover: per });\r\n  };\r\n  render() {\r\n    return (\r\n      <div\r\n        onMouseOver={() => this.bgColor(true)}\r\n        onMouseOut={() => this.bgColor(false)}\r\n        className={\r\n          this.state.hover ? \"error-message-box hover\" : \"error-message-box\"\r\n        }\r\n      >\r\n        <div className=\" box box-top\">\r\n          <div className=\"icon-holder\">\r\n            <span className=\"material-icons\">control_camera</span>\r\n          </div>\r\n          <div className=\"id-holder\">\r\n            <p className=\"error-content error-header\">{this.props.name}</p>\r\n            <p className=\"error-content error-id\">{this.props.errId}</p>\r\n          </div>\r\n          <div\r\n            onClick={() => alert(this.props.message)}\r\n            className={\r\n              this.state.hover ? \"Open-holder showOpen\" : \"Open-holder\"\r\n            }\r\n          >\r\n            <p>Open</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"box box-bottom\">\r\n          <p>{this.props.message} </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default ErrorMessage;\r\n","import React from \"react\";\r\nimport \"./Popup.css\";\r\nimport ErrorMessage from \"../ErrorMessage/ErrorMessage\";\r\n\r\nclass Popup extends React.Component {\r\n  state = {\r\n    erroes: [\r\n      {\r\n        name: \"Test Node\",\r\n        id: \"DHCGSJHGHSGDVCHBVMXBDV\",\r\n        message: \"value cant be null\",\r\n      },\r\n      {\r\n        name: \"js\",\r\n        id: \"VDHCGSJHGHSGVMXBDDVCHBV\",\r\n        message: \"value cant be null value cant be nullvalue cant be null\",\r\n      },\r\n      {\r\n        name: \"Test Node\",\r\n        id: \"HSGDVCJHGBDVHBVMXVDHCGS\",\r\n        message: \"value cant be nullvalue cant be nullvalue cant be null\",\r\n      },\r\n      {\r\n        name: \"Node\",\r\n        id: \"SGDHVCHVDHCGBVMXBSJHGDV\",\r\n        message: \"value cant be nullvalue cant be nullvalue cant be null\",\r\n      },\r\n    ],\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"Popup-background\">\r\n        <div className=\"popup\">\r\n          <p className=\"header\">Validations</p>\r\n          <div className=\"popup-inner-box\">\r\n            {this.state.erroes.map((err) => {\r\n              return (\r\n                <ErrorMessage\r\n                  key = {err.id}\r\n                  name={err.name}\r\n                  errId={err.id}\r\n                  message={err.message}\r\n                />\r\n              );\r\n            })}\r\n            \r\n          </div>\r\n          <button className=\"btn\" onClick={this.props.toglePopup}>\r\n            Close\r\n          </button>\r\n        </div>\r\n        {/* <button >hide</button> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Popup;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Popup from \"./Components/Popup/Popup\";\n\nclass App extends React.Component {\n  state = {\n    showPopup: true\n  };\n  toglePopup = () => {\n\n    this.setState({ showPopup: !this.state.showPopup });\n\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <button \n          onClick={this.toglePopup}\n        >\n          show\n        </button>\n        {this.state.showPopup ? <Popup toglePopup = {this.toglePopup} /> : \"\"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}