{"version":3,"sources":["Components/ErrorMessage/ErrorMessage.js","Components/Popup/Popup.js","App.js","serviceWorker.js","index.js"],"names":["ErrorMessage","props","useState","hoverd","setHoverd","className","onClick","errorSelected","id","type","onMouseEnter","onMouseLeave","hoverid","name","alert","message","Popup","erroes","uuidv4","selected","state","setState","console","log","objIndex","per","i","length","customFindIndex","temp","map","err","key","toglePopup","join","App","showPopup","setShowPopup","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.882efad3.chunk.js","sourcesContent":["import React, {useState}from \"react\";\r\nimport \"./ErrorMessage.css\";\r\n\r\nconst ErrorMessage = (props) => {\r\n  let [hoverd, setHoverd] = useState(false);\r\n  const showAlert = (id) => {\r\n    alert(id);\r\n  };\r\n\r\n  return (\r\n    <div className=\"inputWraper\">\r\n      <input\r\n        onClick={() => props.errorSelected(props.id)}\r\n        className=\"checkbox\"\r\n        type=\"checkbox\"\r\n        id={props.id}\r\n      ></input>\r\n      <div\r\n        onMouseEnter={() => setHoverd(true)}\r\n        onMouseLeave={() => setHoverd(false)}\r\n        id={props.hoverid}\r\n        className={hoverd ? \"error-message-box hover\" : \"error-message-box\"}\r\n      >\r\n        <div className=\" box box-top\">\r\n          <div className=\"icon-holder\">\r\n            <span className=\"material-icons\">control_camera</span>\r\n          </div>\r\n          <div className=\"id-holder\">\r\n            <p className=\"error-content error-header\">{props.name}</p>\r\n            <p className=\"error-content error-id\">{props.id}</p>\r\n          </div>\r\n\r\n          {hoverd ?\r\n            <div\r\n              onClick={() => showAlert(props.id)}\r\n              className=\"Open-holder showOpen\"\r\n            >\r\n              <p>Open</p>\r\n\r\n            </div>\r\n           :null\r\n          }\r\n\r\n        </div>\r\n        <div className=\"box box-bottom\">\r\n          <p>{props.message}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default ErrorMessage;\r\n","import React, { useState } from \"react\";\r\nimport \"./Popup.css\";\r\nimport ErrorMessage from \"../ErrorMessage/ErrorMessage\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst Popup = (props) => {\r\n  let [state, setState] = useState({\r\n    erroes: [\r\n      {\r\n        name: \"Test Node\",\r\n        id: uuidv4(),\r\n        message: \"value cant be null\",\r\n        selected: false,\r\n      },\r\n      {\r\n        name: \"js\",\r\n        id: uuidv4(),\r\n        message: \"value cant be null value cant be nullvalue cant be null\",\r\n        selected: false,\r\n      },\r\n      {\r\n        name: \"Test Node\",\r\n        id: uuidv4(),\r\n        message: \"value cant be nullvalue cant be nullvalue cant be null\",\r\n        selected: false,\r\n      },\r\n      {\r\n        name: \"Node\",\r\n        id: uuidv4(),\r\n        message: \"value cant be nullvalue cant be nullvalue cant be null\",\r\n        selected: false,\r\n      },{\r\n        name: \"js\",\r\n        id: uuidv4(),\r\n        message: \"value cant be null value cant be nullvalue cant be null\",\r\n        selected: false,\r\n      },\r\n      {\r\n        name: \"Test Node\",\r\n        id: uuidv4(),\r\n        message: \"value cant be nullvalue cant be nullvalue cant be null\",\r\n        selected: false,\r\n      }\r\n    ],\r\n  });\r\n\r\n  const customFindIndex = (per) => {\r\n    console.log(per, \"find index ids start\");\r\n\r\n    for (let i = 0; i < state.erroes.length; i++) {\r\n      if (state.erroes[i].id === per) {\r\n        return i;\r\n      }\r\n    }\r\n  };\r\n  const errorSelected = (id) => {\r\n    console.log(id, \"updated ids start\");\r\n    let objIndex = customFindIndex(id);\r\n    console.log(objIndex, \"updated ids index\");\r\n\r\n    let temp = [...state.erroes];\r\n    temp[objIndex].selected = !temp[objIndex].selected;\r\n    setState({ erroes: temp });\r\n  };\r\n\r\n  const showIds = () => {\r\n    alert(state.erroes\r\n      .map((per) => {\r\n        if (per.selected) {\r\n          return per.id;\r\n        }\r\n      })\r\n      .join(\", \"))\r\n  };\r\n\r\n  return (\r\n    <div className=\"Popup-background\">\r\n      <div className=\"popup\">\r\n        <p className=\"header\">Validations</p>\r\n        <div className=\"popup-inner-box\">\r\n          {state.erroes.map((err) => {\r\n            return (\r\n              <ErrorMessage\r\n                {...err}\r\n                key={err.id}\r\n                errorSelected={errorSelected}\r\n                // bgColor={bgColor}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n        <button className=\"btn btnclose\" onClick={props.toglePopup}>\r\n          Close\r\n        </button>\r\n        <button className=\"btn btnSubmit\" onClick={showIds}>\r\n          submit\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Popup;\r\n","import React,{useState} from \"react\";\nimport \"./App.css\";\nimport Popup from \"./Components/Popup/Popup\";\n// import uuid from \"uuid\";\n// import { useState } from \"react\";\nconst App =()=> {\n  // state = {\n  //   showPopup: true\n  // };\n  let [showPopup,setShowPopup] = useState(true)\n  const toglePopup = () => {\n    setShowPopup(!showPopup);\n    // this.setState({ showPopup: !this.state.showPopup });\n\n  };\n    return (\n      <div className=\"App\">\n        <button \n          onClick={toglePopup}\n        >\n          show\n        </button>\n        {showPopup ? <Popup toglePopup = {toglePopup} /> : null}\n      </div>\n    );\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}