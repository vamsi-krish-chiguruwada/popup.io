{"version":3,"sources":["Components/ErrorMessage/ErrorMessage.js","Components/Popup/Popup.js","App.js","serviceWorker.js","index.js"],"names":["ErrorMessage","props","className","onClick","updateids","id","type","onMouseEnter","e","bgColor","onMouseLeave","hoverid","hover","name","alert","message","Popup","useState","erroes","uuidv4","state","setState","selectedIds","setSelectedIds","per","temp","parseInt","currentTarget","includes","splice","indexOf","push","map","err","key","toglePopup","length","App","showPopup","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.bb03af29.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./ErrorMessage.css\";\r\n\r\nconst ErrorMessage = (props) => {\r\n  const showAlert = (id) => {\r\n    alert(id);\r\n  };\r\n\r\n  return (\r\n    <div className=\"inputWraper\">\r\n      <input\r\n        onClick={() => props.updateids(props.id)}\r\n        className=\"checkbox\"\r\n        type=\"checkbox\"\r\n        id={props.id}\r\n      ></input>\r\n      <div\r\n        onMouseEnter={(e) => props.bgColor(e, true)}\r\n        onMouseLeave={(e) => props.bgColor(e, false)}\r\n        id={props.hoverid}\r\n        className={props.hover ? \"error-message-box hover\" : \"error-message-box\"}\r\n      >\r\n        <div className=\" box box-top\">\r\n          <div className=\"icon-holder\">\r\n            <span className=\"material-icons\">control_camera</span>\r\n          </div>\r\n          <div className=\"id-holder\">\r\n            <p className=\"error-content error-header\">{props.name}</p>\r\n            <p className=\"error-content error-id\">{props.id}</p>\r\n          </div>\r\n\r\n          {props.hover ?\r\n            <div\r\n              onClick={() => showAlert(props.id)}\r\n              className=\"Open-holder showOpen\"\r\n            >\r\n              <p>Open</p>\r\n\r\n            </div>\r\n           :null\r\n          }\r\n\r\n        </div>\r\n        <div className=\"box box-bottom\">\r\n          <p>{props.message}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default ErrorMessage;\r\n","import React,{useState} from \"react\";\r\nimport \"./Popup.css\";\r\nimport ErrorMessage from \"../ErrorMessage/ErrorMessage\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst Popup =(props)=> {\r\n\r\n  let [state,setState] = useState({\r\n    erroes: [\r\n      {\r\n        name: \"Test Node\",\r\n        id: uuidv4(),\r\n        message: \"value cant be null\",\r\n        hover:false,\r\n        hoverid:\"0\"\r\n      },\r\n      {\r\n        name: \"js\",\r\n        id: uuidv4(),\r\n        message: \"value cant be null value cant be nullvalue cant be null\",\r\n        hover:false,\r\n        hoverid:\"1\"\r\n\r\n      },\r\n      {\r\n        name: \"Test Node\",\r\n        id: uuidv4(),\r\n        message: \"value cant be nullvalue cant be nullvalue cant be null\",\r\n        hover:false,\r\n        hoverid:\"2\"\r\n\r\n      },\r\n      {\r\n        name: \"Node\",\r\n        id: uuidv4(),\r\n        message: \"value cant be nullvalue cant be nullvalue cant be null\",\r\n        hover:false,\r\n        hoverid:\"3\"\r\n\r\n      },\r\n    ]  \r\n\r\n  })\r\n\r\n  let [selectedIds,setSelectedIds] = useState([])\r\n\r\n  const bgColor = (e,per) => {\r\n   let temp = [...state.erroes];\r\n   temp[parseInt(e.currentTarget.id)].hover = per;\r\n    setState({ erroes: temp });\r\n  };\r\n\r\n  const updateids = (id) =>{\r\n    // console.log(e.currentTarget.id);\r\n\r\n    // console.log(id);\r\n    let temp = [...selectedIds]\r\n    if(!temp.includes(id)){\r\n      // console.log(\"not in sids\");\r\n      temp.push(id)\r\n      setSelectedIds(temp);\r\n      // console.log(\"pushed\",selectedIds);\r\n    }else{\r\n      // console.log(\"in sids\");\r\n      temp.splice(temp.indexOf(id),1);\r\n      setSelectedIds(temp);\r\n      // console.log(\"removed\",selectedIds);\r\n    }\r\n  }\r\n\r\n  const showIds = () =>{\r\n    selectedIds.map((per)=>alert(per))\r\n  }\r\n\r\n\r\n    return (\r\n      <div className=\"Popup-background\">\r\n        <div className=\"popup\">\r\n          <p className=\"header\">Validations</p>\r\n          <div className=\"popup-inner-box\">\r\n            {state.erroes.map((err) => {\r\n              return (\r\n                <ErrorMessage\r\n                  {...err}\r\n                  key={err.id}\r\n                  updateids = {updateids}\r\n                  bgColor={bgColor}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n          <button className=\"btn btnclose\" onClick={props.toglePopup}>\r\n            Close\r\n          </button>\r\n         {selectedIds.length>0?<button className=\"btn btnSubmit\" onClick={showIds}>\r\n            submit\r\n          </button>:\"\"} \r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Popup;\r\n\r\n\r\n// import React from \"react\";\r\n// import \"./Popup.css\";\r\n// import ErrorMessage from \"../ErrorMessage/ErrorMessage\";\r\n// import { v4 as uuidv4 } from \"uuid\";\r\n\r\n// class Popup extends React.Component {\r\n//   state = {\r\n//     erroes: [\r\n//       {\r\n//         name: \"Test Node\",\r\n//         id: uuidv4(),\r\n//         message: \"value cant be null\",\r\n//         hover:false,\r\n//         hoverid:\"0\"\r\n//       },\r\n//       {\r\n//         name: \"js\",\r\n//         id: uuidv4(),\r\n//         message: \"value cant be null value cant be nullvalue cant be null\",\r\n//         hover:false,\r\n//         hoverid:\"1\"\r\n\r\n//       },\r\n//       {\r\n//         name: \"Test Node\",\r\n//         id: uuidv4(),\r\n//         message: \"value cant be nullvalue cant be nullvalue cant be null\",\r\n//         hover:false,\r\n//         hoverid:\"2\"\r\n\r\n//       },\r\n//       {\r\n//         name: \"Node\",\r\n//         id: uuidv4(),\r\n//         message: \"value cant be nullvalue cant be nullvalue cant be null\",\r\n//         hover:false,\r\n//         hoverid:\"3\"\r\n\r\n//       },\r\n//     ],\r\n//   };\r\n//   selectedIds = [];\r\n\r\n//   bgColor = (e,per) => {\r\n//    let temp = [...this.state.erroes];\r\n//    temp[parseInt(e.currentTarget.id)].hover = per;\r\n//     this.setState({ erroes: temp });\r\n//   };\r\n\r\n//   updateids = (id) =>{\r\n\r\n//     console.log(id);\r\n//     if(!this.selectedIds.includes(id)){\r\n//       console.log(\"not in sids\");\r\n//       this.selectedIds.push(id);\r\n//       console.log(\"pushed\",this.selectedIds);\r\n//     }else{\r\n//       console.log(\"in sids\");\r\n//       this.selectedIds.splice(this.selectedIds.indexOf(id),1);\r\n//       console.log(\"removed\",this.selectedIds);\r\n//     }\r\n//   }\r\n\r\n//   showIds = () =>{\r\n//     this.selectedIds.map((per)=>alert(per))\r\n//   }\r\n\r\n\r\n//   render() {\r\n//     return (\r\n//       <div className=\"Popup-background\">\r\n//         <div className=\"popup\">\r\n//           <p className=\"header\">Validations</p>\r\n//           <div className=\"popup-inner-box\">\r\n//             {this.state.erroes.map((err) => {\r\n//               return (\r\n//                 <ErrorMessage\r\n//                   {...err}\r\n//                   key={err.id}\r\n//                   updateids = {this.updateids}\r\n//                   bgColor={this.bgColor}\r\n//                 />\r\n//               );\r\n//             })}\r\n//           </div>\r\n//           <button className=\"btn btnclose\" onClick={this.props.toglePopup}>\r\n//             Close\r\n//           </button>\r\n//           <button className=\"btn btnSubmit\" onClick={this.showIds}>\r\n//             submit\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default Popup;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Popup from \"./Components/Popup/Popup\";\nimport uuid from \"uuid\";\nclass App extends React.Component {\n  state = {\n    showPopup: true\n  };\n  toglePopup = () => {\n\n    this.setState({ showPopup: !this.state.showPopup });\n\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <button \n          onClick={this.toglePopup}\n        >\n          show\n        </button>\n        {this.state.showPopup ? <Popup toglePopup = {this.toglePopup} /> : \"\"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}