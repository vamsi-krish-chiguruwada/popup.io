{"version":3,"sources":["Components/ErrorMessage/ErrorMessage.js","Components/Popup/Popup.js","App.js","serviceWorker.js","index.js"],"names":["ErrorMessage","props","useState","hoverd","setHoverd","hoverColor","useContext","ErrorContext","className","style","backgroundColor","background","color","foreground","onClick","errorSelected","id","type","onMouseEnter","onMouseLeave","hoverid","name","alert","message","Popup","erroes","uuidv4","selected","state","setState","theme","ThemeContext","objIndex","per","console","log","i","length","customFindIndex","temp","map","err","key","toglePopup","join","React","createContext","App","showPopup","setShowPopup","setTheme","errorTheme","setErrorTheme","themes","default","light","dark","custom1","custom2","htmlFor","onChange","e","target","value","handleDropdownChanges","handleErrorDropdown","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.795206c7.chunk.js","sourcesContent":["import React, {useState, useContext}from \"react\";\r\nimport \"./ErrorMessage.css\";\r\nimport {ErrorContext} from \"../../App\";\r\n\r\nconst ErrorMessage = (props) => {\r\n  let [hoverd, setHoverd] = useState(false);\r\n\r\n  // alerts the id when open is clicked\r\n  const showAlert = (id) => {\r\n    alert(id);\r\n  };\r\n  const hoverColor = useContext(ErrorContext);\r\n\r\n  return (\r\n    <div className=\"inputWraper\"  style = {{backgroundColor:hoverColor.background, color:hoverColor.foreground}}>\r\n      <input\r\n        onClick={() => props.errorSelected(props.id)}\r\n        className=\"checkbox\"\r\n        type=\"checkbox\"\r\n        id={props.id}\r\n      ></input>\r\n      <div\r\n        onMouseEnter={() => setHoverd(true)}\r\n        onMouseLeave={() => setHoverd(false)}\r\n        id={props.hoverid}\r\n        className={hoverd ? \"error-message-box hover\" : \"error-message-box\"}\r\n      >\r\n        <div className=\" box box-top\">\r\n          <div className=\"icon-holder\">\r\n            <span className=\"material-icons\"></span>\r\n          </div>\r\n          <div className=\"id-holder\">\r\n            <p className=\"error-content error-header\">{props.name}</p>\r\n            <p className=\"error-content error-id\">{props.id}</p>\r\n          </div>\r\n\r\n          {hoverd ?\r\n            <div\r\n              onClick={() => showAlert(props.id)}\r\n              className=\"Open-holder showOpen\"\r\n            >\r\n              <p>Open</p>\r\n\r\n            </div>\r\n           :null\r\n          }\r\n\r\n        </div>\r\n        <div className=\"box box-bottom\">\r\n          <p>{props.message}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default ErrorMessage;\r\n","import React, { useState, useContext} from \"react\";\r\nimport \"./Popup.css\";\r\nimport ErrorMessage from \"../ErrorMessage/ErrorMessage\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport {ThemeContext} from \"../../App\";\r\nconst Popup = (props) => {\r\n  let [state, setState] = useState({\r\n    erroes: [\r\n      {\r\n        name: \"Test Node\",\r\n        id: uuidv4(),\r\n        message: \"value cant be null\",\r\n        selected: false,\r\n      },\r\n      {\r\n        name: \"js\",\r\n        id: uuidv4(),\r\n        message: \"value cant be null value cant be nullvalue cant be null\",\r\n        selected: false,\r\n      },\r\n      {\r\n        name: \"Test Node\",\r\n        id: uuidv4(),\r\n        message: \"value cant be nullvalue cant be nullvalue cant be null\",\r\n        selected: false,\r\n      },\r\n      {\r\n        name: \"Node\",\r\n        id: uuidv4(),\r\n        message: \"value cant be nullvalue cant be nullvalue cant be null\",\r\n        selected: false,\r\n      },{\r\n        name: \"js\",\r\n        id: uuidv4(),\r\n        message: \"value cant be null value cant be nullvalue cant be null\",\r\n        selected: false,\r\n      },\r\n      {\r\n        name: \"Test Node\",\r\n        id: uuidv4(),\r\n        message: \"value cant be nullvalue cant be nullvalue cant be null\",\r\n        selected: false,\r\n      }\r\n    ],\r\n  });\r\n\r\n  const theme = useContext(ThemeContext);\r\n\r\n  // takes id as perameter and searches in list of objects and \r\n  // returns the index of object that contains the id\r\n  const customFindIndex = (per) => {\r\n    console.log(per, \"find index ids start\");\r\n\r\n    for (let i = 0; i < state.erroes.length; i++) {\r\n      if (state.erroes[i].id === per) {\r\n        return i;\r\n      }\r\n    }\r\n  };\r\n\r\n// function runs on clicking on checkbox and changes the  bool state is selected\r\n  const errorSelected = (id) => {\r\n    let objIndex = customFindIndex(id);\r\n    let temp = [...state.erroes];\r\n    temp[objIndex].selected = !temp[objIndex].selected;\r\n    setState({ erroes: temp });\r\n  };\r\n// allerts all the id's with selected sate as true \r\n  const showIds = () => {\r\n    alert(state.erroes\r\n      .map((per) => {\r\n        if (per.selected) {\r\n          return per.id;\r\n        }\r\n      })\r\n      .join(\", \"))\r\n  };\r\n\r\n  return (\r\n    <div className=\"Popup-background\">\r\n      {/* <p>\"theme\"{console.log(theme)}</p> */}\r\n        <div className=\"popup\" style = {{backgroundColor:theme.background, color:theme.foreground}}>\r\n        <p className=\"header\">Validations</p>\r\n        <div className=\"popup-inner-box\">\r\n          {state.erroes.map((err) => {\r\n            return (\r\n              <ErrorMessage\r\n                {...err}\r\n                key={err.id}\r\n                errorSelected={errorSelected}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n        <button className=\"btn btnclose\" onClick={props.toglePopup}>\r\n          Close\r\n        </button>\r\n        <button className=\"btn btnSubmit\" onClick={showIds}>\r\n          submit\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Popup;\r\n","import React,{useState} from \"react\";\nimport \"./App.css\";\nimport Popup from \"./Components/Popup/Popup\";\n\n\nexport const ThemeContext = React.createContext();\nexport const ErrorContext = React.createContext();\n\n\nconst App =()=> {\n\n  let [showPopup,setShowPopup] = useState(false)\n\n  let [theme,setTheme] = useState({\n    foreground: '#000000',\n    background: \"#fffff\",\n  });\n  let [errorTheme,setErrorTheme] = useState({\n    foreground: '#000000',\n    background: \"#fffff\",\n  });\n  \n  const themes = {default: {\n    foreground: '#000000',\n    background: \"#fffff\",\n  },light: {\n    foreground: '#000000',\n    background: '#eeeeee',\n  },dark: {\n    foreground: '#ffffff',\n    background: '#222222',\n  },custom1:{\n    background: \"rgb(87 107 89)\",\n    foreground: \"rgb(6 3 3)\"\n  },custom2:{\n    background: \"rgb(43 90 121)\",\n    foreground: \"rgb(97 212 108)\"\n  }}\n\n  // used to change bool state \"showPopup\" to display/hide the popup message\n  const toglePopup = () => {\n    setShowPopup(!showPopup);\n  };\n  const handleDropdownChanges = (e)=>{\n    setTheme(themes[e.target.value]);\n  }\n  const handleErrorDropdown = (e)=>{\n    setErrorTheme(themes[e.target.value]);\n\n  }\n    return (\n      <div className=\"App\">\n        <div className = \"AppDiv\">\n        <button \n          onClick={toglePopup}\n        >\n          Show Popup\n        </button>\n\n      <div className = \"dropdown\">\n        <label htmlFor=\"theme\">Choose popup theme:</label>\n\n        <select onChange = {(e)=>handleDropdownChanges(e)} name=\"theme\" id=\"theme\">\n        <option value=\"default\">default</option>\n          <option value=\"light\">Light</option>\n          <option value=\"dark\">Dark</option>\n          <option value=\"custom1\">custom1</option>\n          <option value=\"custom2\">custom2</option>\n\n        </select>\n      </div>\n\n      <div className = \"dropdown\">\n        <label htmlFor=\"theme\">Choose error theme:</label>\n\n        <select onChange = {(e)=>handleErrorDropdown(e)} name=\"theme\" >\n        <option value=\"default\">default</option>\n          <option value=\"light\">Light</option>\n          <option value=\"dark\">Dark</option>\n          <option value=\"custom1\">custom1</option>\n          <option value=\"custom2\">custom2</option>\n        </select>\n      </div>\n      </div>\n\n        {showPopup ?\n        <ThemeContext.Provider value = {theme}>\n          <ErrorContext.Provider value = {errorTheme}>\n         <Popup toglePopup = {toglePopup} />\n         </ErrorContext.Provider>\n         </ThemeContext.Provider>\n          : null}\n      </div>\n    );\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}